/**

*/
declare const blobManagerAbi: readonly [{
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "params";
        readonly internalType: "struct AddBlobParams";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "sponsor";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "source";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "blobHash";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "metadataHash";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "subscriptionId";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "size";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "ttl";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly name: "addBlob";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "subscriber";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "blobHash";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "subscriptionId";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "deleteBlob";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "size";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "getAddedBlobs";
    readonly outputs: readonly [{
        readonly name: "blobs";
        readonly internalType: "struct BlobTuple[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "blobHash";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "sourceInfo";
            readonly internalType: "struct BlobSourceInfo[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "subscriber";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "subscriptionId";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "source";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "blobHash";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "getBlob";
    readonly outputs: readonly [{
        readonly name: "blob";
        readonly internalType: "struct Blob";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "size";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "metadataHash";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "subscribers";
            readonly internalType: "struct Subscriber[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "subscriptionId";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "expiry";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }];
        }, {
            readonly name: "status";
            readonly internalType: "enum BlobStatus";
            readonly type: "uint8";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "subscriber";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "blobHash";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "subscriptionId";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "getBlobStatus";
    readonly outputs: readonly [{
        readonly name: "status";
        readonly internalType: "enum BlobStatus";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "size";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "getPendingBlobs";
    readonly outputs: readonly [{
        readonly name: "blobs";
        readonly internalType: "struct BlobTuple[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "blobHash";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "sourceInfo";
            readonly internalType: "struct BlobSourceInfo[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "subscriber";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "subscriptionId";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "source";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getPendingBlobsCount";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getPendingBytesCount";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getStorageStats";
    readonly outputs: readonly [{
        readonly name: "stats";
        readonly internalType: "struct StorageStats";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "capacityFree";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "capacityUsed";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "numBlobs";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "numResolving";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "numAccounts";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "bytesResolving";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "numAdded";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "bytesAdded";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "addr";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getStorageUsage";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getSubnetStats";
    readonly outputs: readonly [{
        readonly name: "stats";
        readonly internalType: "struct SubnetStats";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "balance";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "capacityFree";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "capacityUsed";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "creditSold";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "creditCommitted";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "creditDebited";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "tokenCreditRate";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "numAccounts";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "numBlobs";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "numAdded";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "bytesAdded";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "numResolving";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "bytesResolving";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "oldHash";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "params";
        readonly internalType: "struct AddBlobParams";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "sponsor";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "source";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "blobHash";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "metadataHash";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "subscriptionId";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "size";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "ttl";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly name: "overwriteBlob";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}];
/**

*/
declare const blobManagerAddress: {
    readonly 2481632: "0x27594F8412bA08278b15b55C6347605Ee3b2020C";
    readonly 248163216: "0x8ce361602B935680E8DeC218b820ff5056BeB7af";
};
/**

*/
declare const blobManagerConfig: {
    readonly address: {
        readonly 2481632: "0x27594F8412bA08278b15b55C6347605Ee3b2020C";
        readonly 248163216: "0x8ce361602B935680E8DeC218b820ff5056BeB7af";
    };
    readonly abi: readonly [{
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "params";
            readonly internalType: "struct AddBlobParams";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "sponsor";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "source";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "blobHash";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "metadataHash";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "subscriptionId";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "size";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "ttl";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "from";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
        readonly name: "addBlob";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "subscriber";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "blobHash";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "subscriptionId";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "deleteBlob";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "size";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "getAddedBlobs";
        readonly outputs: readonly [{
            readonly name: "blobs";
            readonly internalType: "struct BlobTuple[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "blobHash";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "sourceInfo";
                readonly internalType: "struct BlobSourceInfo[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "subscriber";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "subscriptionId";
                    readonly internalType: "string";
                    readonly type: "string";
                }, {
                    readonly name: "source";
                    readonly internalType: "string";
                    readonly type: "string";
                }];
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "blobHash";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "getBlob";
        readonly outputs: readonly [{
            readonly name: "blob";
            readonly internalType: "struct Blob";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "size";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "metadataHash";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "subscribers";
                readonly internalType: "struct Subscriber[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "subscriptionId";
                    readonly internalType: "string";
                    readonly type: "string";
                }, {
                    readonly name: "expiry";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }];
            }, {
                readonly name: "status";
                readonly internalType: "enum BlobStatus";
                readonly type: "uint8";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "subscriber";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "blobHash";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "subscriptionId";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "getBlobStatus";
        readonly outputs: readonly [{
            readonly name: "status";
            readonly internalType: "enum BlobStatus";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "size";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "getPendingBlobs";
        readonly outputs: readonly [{
            readonly name: "blobs";
            readonly internalType: "struct BlobTuple[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "blobHash";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "sourceInfo";
                readonly internalType: "struct BlobSourceInfo[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "subscriber";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "subscriptionId";
                    readonly internalType: "string";
                    readonly type: "string";
                }, {
                    readonly name: "source";
                    readonly internalType: "string";
                    readonly type: "string";
                }];
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getPendingBlobsCount";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getPendingBytesCount";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getStorageStats";
        readonly outputs: readonly [{
            readonly name: "stats";
            readonly internalType: "struct StorageStats";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "capacityFree";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "capacityUsed";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "numBlobs";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "numResolving";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "numAccounts";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "bytesResolving";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "numAdded";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "bytesAdded";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "addr";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getStorageUsage";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getSubnetStats";
        readonly outputs: readonly [{
            readonly name: "stats";
            readonly internalType: "struct SubnetStats";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "balance";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "capacityFree";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "capacityUsed";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "creditSold";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "creditCommitted";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "creditDebited";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "tokenCreditRate";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "numAccounts";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "numBlobs";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "numAdded";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "bytesAdded";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "numResolving";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "bytesResolving";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "oldHash";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "params";
            readonly internalType: "struct AddBlobParams";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "sponsor";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "source";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "blobHash";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "metadataHash";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "subscriptionId";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "size";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "ttl";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "from";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
        readonly name: "overwriteBlob";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }];
};
/**

*/
declare const bucketManagerAbi: readonly [{
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "bucket";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "source";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "key";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "blobHash";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "recoveryHash";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "size";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "addObject";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "bucket";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "params";
        readonly internalType: "struct AddObjectParams";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "source";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "key";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "blobHash";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "recoveryHash";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "size";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "ttl";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "metadata";
            readonly internalType: "struct KeyValue[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "key";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "value";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }, {
            readonly name: "overwrite";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly name: "addObject";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "createBucket";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "metadata";
        readonly internalType: "struct KeyValue[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "key";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "value";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }];
    readonly name: "createBucket";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "createBucket";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "bucket";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "key";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "deleteObject";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "bucket";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "key";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "getObject";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct ObjectValue";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "blobHash";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "recoveryHash";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "size";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "expiry";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "metadata";
            readonly internalType: "struct KeyValue[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "key";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "value";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "listBuckets";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct Machine[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "kind";
            readonly internalType: "enum Kind";
            readonly type: "uint8";
        }, {
            readonly name: "addr";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "metadata";
            readonly internalType: "struct KeyValue[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "key";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "value";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "listBuckets";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct Machine[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "kind";
            readonly internalType: "enum Kind";
            readonly type: "uint8";
        }, {
            readonly name: "addr";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "metadata";
            readonly internalType: "struct KeyValue[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "key";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "value";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "bucket";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "queryObjects";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct Query";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "objects";
            readonly internalType: "struct Object[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "key";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "state";
                readonly internalType: "struct ObjectState";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "blobHash";
                    readonly internalType: "string";
                    readonly type: "string";
                }, {
                    readonly name: "size";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "expiry";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "metadata";
                    readonly internalType: "struct KeyValue[]";
                    readonly type: "tuple[]";
                    readonly components: readonly [{
                        readonly name: "key";
                        readonly internalType: "string";
                        readonly type: "string";
                    }, {
                        readonly name: "value";
                        readonly internalType: "string";
                        readonly type: "string";
                    }];
                }];
            }];
        }, {
            readonly name: "commonPrefixes";
            readonly internalType: "string[]";
            readonly type: "string[]";
        }, {
            readonly name: "nextKey";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "bucket";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "prefix";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "delimiter";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "startKey";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "limit";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }];
    readonly name: "queryObjects";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct Query";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "objects";
            readonly internalType: "struct Object[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "key";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "state";
                readonly internalType: "struct ObjectState";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "blobHash";
                    readonly internalType: "string";
                    readonly type: "string";
                }, {
                    readonly name: "size";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "expiry";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "metadata";
                    readonly internalType: "struct KeyValue[]";
                    readonly type: "tuple[]";
                    readonly components: readonly [{
                        readonly name: "key";
                        readonly internalType: "string";
                        readonly type: "string";
                    }, {
                        readonly name: "value";
                        readonly internalType: "string";
                        readonly type: "string";
                    }];
                }];
            }];
        }, {
            readonly name: "commonPrefixes";
            readonly internalType: "string[]";
            readonly type: "string[]";
        }, {
            readonly name: "nextKey";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "bucket";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "prefix";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "delimiter";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "queryObjects";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct Query";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "objects";
            readonly internalType: "struct Object[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "key";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "state";
                readonly internalType: "struct ObjectState";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "blobHash";
                    readonly internalType: "string";
                    readonly type: "string";
                }, {
                    readonly name: "size";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "expiry";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "metadata";
                    readonly internalType: "struct KeyValue[]";
                    readonly type: "tuple[]";
                    readonly components: readonly [{
                        readonly name: "key";
                        readonly internalType: "string";
                        readonly type: "string";
                    }, {
                        readonly name: "value";
                        readonly internalType: "string";
                        readonly type: "string";
                    }];
                }];
            }];
        }, {
            readonly name: "commonPrefixes";
            readonly internalType: "string[]";
            readonly type: "string[]";
        }, {
            readonly name: "nextKey";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "bucket";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "prefix";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "delimiter";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "startKey";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "queryObjects";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct Query";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "objects";
            readonly internalType: "struct Object[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "key";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "state";
                readonly internalType: "struct ObjectState";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "blobHash";
                    readonly internalType: "string";
                    readonly type: "string";
                }, {
                    readonly name: "size";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "expiry";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "metadata";
                    readonly internalType: "struct KeyValue[]";
                    readonly type: "tuple[]";
                    readonly components: readonly [{
                        readonly name: "key";
                        readonly internalType: "string";
                        readonly type: "string";
                    }, {
                        readonly name: "value";
                        readonly internalType: "string";
                        readonly type: "string";
                    }];
                }];
            }];
        }, {
            readonly name: "commonPrefixes";
            readonly internalType: "string[]";
            readonly type: "string[]";
        }, {
            readonly name: "nextKey";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "bucket";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "prefix";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "queryObjects";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct Query";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "objects";
            readonly internalType: "struct Object[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "key";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "state";
                readonly internalType: "struct ObjectState";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "blobHash";
                    readonly internalType: "string";
                    readonly type: "string";
                }, {
                    readonly name: "size";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "expiry";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "metadata";
                    readonly internalType: "struct KeyValue[]";
                    readonly type: "tuple[]";
                    readonly components: readonly [{
                        readonly name: "key";
                        readonly internalType: "string";
                        readonly type: "string";
                    }, {
                        readonly name: "value";
                        readonly internalType: "string";
                        readonly type: "string";
                    }];
                }];
            }];
        }, {
            readonly name: "commonPrefixes";
            readonly internalType: "string[]";
            readonly type: "string[]";
        }, {
            readonly name: "nextKey";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "bucket";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "key";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "metadata";
        readonly internalType: "struct KeyValue[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "key";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "value";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "updateObjectMetadata";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}];
/**

*/
declare const bucketManagerAddress: {
    readonly 2481632: "0x170a22c76a2Bb7c5F1b0e7067a0ddb7C3452c8e0";
    readonly 248163216: "0xeD1DB453C3156Ff3155a97AD217b3087D5Dc5f6E";
};
/**

*/
declare const bucketManagerConfig: {
    readonly address: {
        readonly 2481632: "0x170a22c76a2Bb7c5F1b0e7067a0ddb7C3452c8e0";
        readonly 248163216: "0xeD1DB453C3156Ff3155a97AD217b3087D5Dc5f6E";
    };
    readonly abi: readonly [{
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "bucket";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "source";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "key";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "blobHash";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "recoveryHash";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "size";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "addObject";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "bucket";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "params";
            readonly internalType: "struct AddObjectParams";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "source";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "key";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "blobHash";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "recoveryHash";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "size";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "ttl";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "metadata";
                readonly internalType: "struct KeyValue[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "key";
                    readonly internalType: "string";
                    readonly type: "string";
                }, {
                    readonly name: "value";
                    readonly internalType: "string";
                    readonly type: "string";
                }];
            }, {
                readonly name: "overwrite";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "from";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
        readonly name: "addObject";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "createBucket";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "metadata";
            readonly internalType: "struct KeyValue[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "key";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "value";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
        readonly name: "createBucket";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "createBucket";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "bucket";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "key";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "deleteObject";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "bucket";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "key";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "getObject";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct ObjectValue";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "blobHash";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "recoveryHash";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "size";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "expiry";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "metadata";
                readonly internalType: "struct KeyValue[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "key";
                    readonly internalType: "string";
                    readonly type: "string";
                }, {
                    readonly name: "value";
                    readonly internalType: "string";
                    readonly type: "string";
                }];
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "listBuckets";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct Machine[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "kind";
                readonly internalType: "enum Kind";
                readonly type: "uint8";
            }, {
                readonly name: "addr";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "metadata";
                readonly internalType: "struct KeyValue[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "key";
                    readonly internalType: "string";
                    readonly type: "string";
                }, {
                    readonly name: "value";
                    readonly internalType: "string";
                    readonly type: "string";
                }];
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "listBuckets";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct Machine[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "kind";
                readonly internalType: "enum Kind";
                readonly type: "uint8";
            }, {
                readonly name: "addr";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "metadata";
                readonly internalType: "struct KeyValue[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "key";
                    readonly internalType: "string";
                    readonly type: "string";
                }, {
                    readonly name: "value";
                    readonly internalType: "string";
                    readonly type: "string";
                }];
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "bucket";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "queryObjects";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct Query";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "objects";
                readonly internalType: "struct Object[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "key";
                    readonly internalType: "string";
                    readonly type: "string";
                }, {
                    readonly name: "state";
                    readonly internalType: "struct ObjectState";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "blobHash";
                        readonly internalType: "string";
                        readonly type: "string";
                    }, {
                        readonly name: "size";
                        readonly internalType: "uint64";
                        readonly type: "uint64";
                    }, {
                        readonly name: "expiry";
                        readonly internalType: "uint64";
                        readonly type: "uint64";
                    }, {
                        readonly name: "metadata";
                        readonly internalType: "struct KeyValue[]";
                        readonly type: "tuple[]";
                        readonly components: readonly [{
                            readonly name: "key";
                            readonly internalType: "string";
                            readonly type: "string";
                        }, {
                            readonly name: "value";
                            readonly internalType: "string";
                            readonly type: "string";
                        }];
                    }];
                }];
            }, {
                readonly name: "commonPrefixes";
                readonly internalType: "string[]";
                readonly type: "string[]";
            }, {
                readonly name: "nextKey";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "bucket";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "prefix";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "delimiter";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "startKey";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "limit";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }];
        readonly name: "queryObjects";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct Query";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "objects";
                readonly internalType: "struct Object[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "key";
                    readonly internalType: "string";
                    readonly type: "string";
                }, {
                    readonly name: "state";
                    readonly internalType: "struct ObjectState";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "blobHash";
                        readonly internalType: "string";
                        readonly type: "string";
                    }, {
                        readonly name: "size";
                        readonly internalType: "uint64";
                        readonly type: "uint64";
                    }, {
                        readonly name: "expiry";
                        readonly internalType: "uint64";
                        readonly type: "uint64";
                    }, {
                        readonly name: "metadata";
                        readonly internalType: "struct KeyValue[]";
                        readonly type: "tuple[]";
                        readonly components: readonly [{
                            readonly name: "key";
                            readonly internalType: "string";
                            readonly type: "string";
                        }, {
                            readonly name: "value";
                            readonly internalType: "string";
                            readonly type: "string";
                        }];
                    }];
                }];
            }, {
                readonly name: "commonPrefixes";
                readonly internalType: "string[]";
                readonly type: "string[]";
            }, {
                readonly name: "nextKey";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "bucket";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "prefix";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "delimiter";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "queryObjects";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct Query";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "objects";
                readonly internalType: "struct Object[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "key";
                    readonly internalType: "string";
                    readonly type: "string";
                }, {
                    readonly name: "state";
                    readonly internalType: "struct ObjectState";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "blobHash";
                        readonly internalType: "string";
                        readonly type: "string";
                    }, {
                        readonly name: "size";
                        readonly internalType: "uint64";
                        readonly type: "uint64";
                    }, {
                        readonly name: "expiry";
                        readonly internalType: "uint64";
                        readonly type: "uint64";
                    }, {
                        readonly name: "metadata";
                        readonly internalType: "struct KeyValue[]";
                        readonly type: "tuple[]";
                        readonly components: readonly [{
                            readonly name: "key";
                            readonly internalType: "string";
                            readonly type: "string";
                        }, {
                            readonly name: "value";
                            readonly internalType: "string";
                            readonly type: "string";
                        }];
                    }];
                }];
            }, {
                readonly name: "commonPrefixes";
                readonly internalType: "string[]";
                readonly type: "string[]";
            }, {
                readonly name: "nextKey";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "bucket";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "prefix";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "delimiter";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "startKey";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "queryObjects";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct Query";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "objects";
                readonly internalType: "struct Object[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "key";
                    readonly internalType: "string";
                    readonly type: "string";
                }, {
                    readonly name: "state";
                    readonly internalType: "struct ObjectState";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "blobHash";
                        readonly internalType: "string";
                        readonly type: "string";
                    }, {
                        readonly name: "size";
                        readonly internalType: "uint64";
                        readonly type: "uint64";
                    }, {
                        readonly name: "expiry";
                        readonly internalType: "uint64";
                        readonly type: "uint64";
                    }, {
                        readonly name: "metadata";
                        readonly internalType: "struct KeyValue[]";
                        readonly type: "tuple[]";
                        readonly components: readonly [{
                            readonly name: "key";
                            readonly internalType: "string";
                            readonly type: "string";
                        }, {
                            readonly name: "value";
                            readonly internalType: "string";
                            readonly type: "string";
                        }];
                    }];
                }];
            }, {
                readonly name: "commonPrefixes";
                readonly internalType: "string[]";
                readonly type: "string[]";
            }, {
                readonly name: "nextKey";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "bucket";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "prefix";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "queryObjects";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct Query";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "objects";
                readonly internalType: "struct Object[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "key";
                    readonly internalType: "string";
                    readonly type: "string";
                }, {
                    readonly name: "state";
                    readonly internalType: "struct ObjectState";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "blobHash";
                        readonly internalType: "string";
                        readonly type: "string";
                    }, {
                        readonly name: "size";
                        readonly internalType: "uint64";
                        readonly type: "uint64";
                    }, {
                        readonly name: "expiry";
                        readonly internalType: "uint64";
                        readonly type: "uint64";
                    }, {
                        readonly name: "metadata";
                        readonly internalType: "struct KeyValue[]";
                        readonly type: "tuple[]";
                        readonly components: readonly [{
                            readonly name: "key";
                            readonly internalType: "string";
                            readonly type: "string";
                        }, {
                            readonly name: "value";
                            readonly internalType: "string";
                            readonly type: "string";
                        }];
                    }];
                }];
            }, {
                readonly name: "commonPrefixes";
                readonly internalType: "string[]";
                readonly type: "string[]";
            }, {
                readonly name: "nextKey";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "bucket";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "key";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "metadata";
            readonly internalType: "struct KeyValue[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "key";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "value";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "updateObjectMetadata";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }];
};
/**

*/
declare const creditManagerAbi: readonly [{
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "approveCredit";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "caller";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly name: "approveCredit";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "caller";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "creditLimit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "gasFeeLimit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "ttl";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }];
    readonly name: "approveCredit";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "approveCredit";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "buyCredit";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "buyCredit";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "addr";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getAccount";
    readonly outputs: readonly [{
        readonly name: "account";
        readonly internalType: "struct Account";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "capacityUsed";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "creditFree";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "creditCommitted";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "creditSponsor";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "lastDebitEpoch";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "approvalsTo";
            readonly internalType: "struct Approval[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "addr";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "approval";
                readonly internalType: "struct CreditApproval";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "creditLimit";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "gasFeeLimit";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "expiry";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "creditUsed";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "gasFeeUsed";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }];
            }];
        }, {
            readonly name: "approvalsFrom";
            readonly internalType: "struct Approval[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "addr";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "approval";
                readonly internalType: "struct CreditApproval";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "creditLimit";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "gasFeeLimit";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "expiry";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "creditUsed";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "gasFeeUsed";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }];
            }];
        }, {
            readonly name: "maxTtl";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "gasAllowance";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getCreditApproval";
    readonly outputs: readonly [{
        readonly name: "approval";
        readonly internalType: "struct CreditApproval";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "creditLimit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "gasFeeLimit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "expiry";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "creditUsed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "gasFeeUsed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "addr";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getCreditBalance";
    readonly outputs: readonly [{
        readonly name: "balance";
        readonly internalType: "struct Balance";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "creditFree";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "creditCommitted";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "creditSponsor";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "lastDebitEpoch";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "approvalsTo";
            readonly internalType: "struct Approval[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "addr";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "approval";
                readonly internalType: "struct CreditApproval";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "creditLimit";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "gasFeeLimit";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "expiry";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "creditUsed";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "gasFeeUsed";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }];
            }];
        }, {
            readonly name: "approvalsFrom";
            readonly internalType: "struct Approval[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "addr";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "approval";
                readonly internalType: "struct CreditApproval";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "creditLimit";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "gasFeeLimit";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "expiry";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "creditUsed";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "gasFeeUsed";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }];
            }];
        }, {
            readonly name: "gasAllowance";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getCreditStats";
    readonly outputs: readonly [{
        readonly name: "stats";
        readonly internalType: "struct CreditStats";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "balance";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "creditSold";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "creditCommitted";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "creditDebited";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "tokenCreditRate";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "numAccounts";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "revokeCredit";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "revokeCredit";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "revokeCredit";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "sponsor";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAccountSponsor";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}];
/**

*/
declare const creditManagerAddress: {
    readonly 2481632: "0x296042865b783D8E8Fb09F04FFAE2A66a16B85Bc";
    readonly 248163216: "0x196dBCBb54b8ec4958c959D8949EBFE87aC2Aaaf";
};
/**

*/
declare const creditManagerConfig: {
    readonly address: {
        readonly 2481632: "0x296042865b783D8E8Fb09F04FFAE2A66a16B85Bc";
        readonly 248163216: "0x196dBCBb54b8ec4958c959D8949EBFE87aC2Aaaf";
    };
    readonly abi: readonly [{
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "approveCredit";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "caller";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
        readonly name: "approveCredit";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "caller";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "creditLimit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "gasFeeLimit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ttl";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }];
        readonly name: "approveCredit";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "approveCredit";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "buyCredit";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "buyCredit";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "addr";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getAccount";
        readonly outputs: readonly [{
            readonly name: "account";
            readonly internalType: "struct Account";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "capacityUsed";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "creditFree";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "creditCommitted";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "creditSponsor";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "lastDebitEpoch";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "approvalsTo";
                readonly internalType: "struct Approval[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "addr";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "approval";
                    readonly internalType: "struct CreditApproval";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "creditLimit";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }, {
                        readonly name: "gasFeeLimit";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }, {
                        readonly name: "expiry";
                        readonly internalType: "uint64";
                        readonly type: "uint64";
                    }, {
                        readonly name: "creditUsed";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }, {
                        readonly name: "gasFeeUsed";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }];
                }];
            }, {
                readonly name: "approvalsFrom";
                readonly internalType: "struct Approval[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "addr";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "approval";
                    readonly internalType: "struct CreditApproval";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "creditLimit";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }, {
                        readonly name: "gasFeeLimit";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }, {
                        readonly name: "expiry";
                        readonly internalType: "uint64";
                        readonly type: "uint64";
                    }, {
                        readonly name: "creditUsed";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }, {
                        readonly name: "gasFeeUsed";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }];
                }];
            }, {
                readonly name: "maxTtl";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "gasAllowance";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getCreditApproval";
        readonly outputs: readonly [{
            readonly name: "approval";
            readonly internalType: "struct CreditApproval";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "creditLimit";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "gasFeeLimit";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "expiry";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "creditUsed";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "gasFeeUsed";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "addr";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getCreditBalance";
        readonly outputs: readonly [{
            readonly name: "balance";
            readonly internalType: "struct Balance";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "creditFree";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "creditCommitted";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "creditSponsor";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "lastDebitEpoch";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "approvalsTo";
                readonly internalType: "struct Approval[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "addr";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "approval";
                    readonly internalType: "struct CreditApproval";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "creditLimit";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }, {
                        readonly name: "gasFeeLimit";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }, {
                        readonly name: "expiry";
                        readonly internalType: "uint64";
                        readonly type: "uint64";
                    }, {
                        readonly name: "creditUsed";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }, {
                        readonly name: "gasFeeUsed";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }];
                }];
            }, {
                readonly name: "approvalsFrom";
                readonly internalType: "struct Approval[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "addr";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "approval";
                    readonly internalType: "struct CreditApproval";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "creditLimit";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }, {
                        readonly name: "gasFeeLimit";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }, {
                        readonly name: "expiry";
                        readonly internalType: "uint64";
                        readonly type: "uint64";
                    }, {
                        readonly name: "creditUsed";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }, {
                        readonly name: "gasFeeUsed";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }];
                }];
            }, {
                readonly name: "gasAllowance";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getCreditStats";
        readonly outputs: readonly [{
            readonly name: "stats";
            readonly internalType: "struct CreditStats";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "balance";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "creditSold";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "creditCommitted";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "creditDebited";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "tokenCreditRate";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "numAccounts";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "revokeCredit";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "revokeCredit";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "revokeCredit";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "sponsor";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAccountSponsor";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }];
};
/**
 * -
 * - [__View Contract on Filecoin Calibration Filscan__](https://calibration.filscan.io/address/0x2758f99EaB8ea9B8678B5d841851D62Ef18AAB26)
 */
declare const gatewayManagerFacetAbi: readonly [{
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "addStake";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "subnetId";
        readonly internalType: "struct SubnetID";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "root";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "route";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
    }, {
        readonly name: "to";
        readonly internalType: "struct FvmAddress";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "addrType";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }, {
            readonly name: "payload";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "fund";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "subnetId";
        readonly internalType: "struct SubnetID";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "root";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "route";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
    }, {
        readonly name: "to";
        readonly internalType: "struct FvmAddress";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "addrType";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }, {
            readonly name: "payload";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "fundWithToken";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "kill";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "genesisCircSupply";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "collateral";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "register";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "struct FvmAddress";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "addrType";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }, {
            readonly name: "payload";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "release";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "releaseStake";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "epoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }];
    readonly name: "NewBottomUpMsgBatch";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "subnet";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "message";
        readonly internalType: "struct IpcEnvelope";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "kind";
            readonly internalType: "enum IpcMsgKind";
            readonly type: "uint8";
        }, {
            readonly name: "to";
            readonly internalType: "struct IPCAddress";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "subnetId";
                readonly internalType: "struct SubnetID";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "root";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "route";
                    readonly internalType: "address[]";
                    readonly type: "address[]";
                }];
            }, {
                readonly name: "rawAddress";
                readonly internalType: "struct FvmAddress";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "addrType";
                    readonly internalType: "uint8";
                    readonly type: "uint8";
                }, {
                    readonly name: "payload";
                    readonly internalType: "bytes";
                    readonly type: "bytes";
                }];
            }];
        }, {
            readonly name: "from";
            readonly internalType: "struct IPCAddress";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "subnetId";
                readonly internalType: "struct SubnetID";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "root";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "route";
                    readonly internalType: "address[]";
                    readonly type: "address[]";
                }];
            }, {
                readonly name: "rawAddress";
                readonly internalType: "struct FvmAddress";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "addrType";
                    readonly internalType: "uint8";
                    readonly type: "uint8";
                }, {
                    readonly name: "payload";
                    readonly internalType: "bytes";
                    readonly type: "bytes";
                }];
            }];
        }, {
            readonly name: "nonce";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "message";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly indexed: false;
    }];
    readonly name: "NewTopDownMessage";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressInsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AlreadyRegisteredSubnet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CallFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CannotReleaseZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InsufficientFunds";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidActorAddress";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "reason";
        readonly internalType: "enum InvalidXnetMessageReason";
        readonly type: "uint8";
    }];
    readonly name: "InvalidXnetMessage";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "reason";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "MethodNotAllowed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotEmptySubnetCircSupply";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotEnoughBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotEnoughFunds";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotEnoughFundsToRelease";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotRegisteredSubnet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyError";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "SafeERC20FailedOperation";
}];
/**
 * -
 * - [__View Contract on Filecoin Calibration Filscan__](https://calibration.filscan.io/address/0x2758f99EaB8ea9B8678B5d841851D62Ef18AAB26)
 */
declare const gatewayManagerFacetAddress: {
    readonly 31337: "0x9A676e781A523b5d0C0e43731313A708CB607508";
    readonly 314159: "0x2758f99EaB8ea9B8678B5d841851D62Ef18AAB26";
    readonly 2481632: "0x77Aa40B105843728088c0132e43FC44348881DA8";
    readonly 248163216: "0x77Aa40B105843728088c0132e43FC44348881DA8";
    readonly 1942764459484029: "0x77Aa40B105843728088c0132e43FC44348881DA8";
};
/**
 * -
 * - [__View Contract on Filecoin Calibration Filscan__](https://calibration.filscan.io/address/0x2758f99EaB8ea9B8678B5d841851D62Ef18AAB26)
 */
declare const gatewayManagerFacetConfig: {
    readonly address: {
        readonly 31337: "0x9A676e781A523b5d0C0e43731313A708CB607508";
        readonly 314159: "0x2758f99EaB8ea9B8678B5d841851D62Ef18AAB26";
        readonly 2481632: "0x77Aa40B105843728088c0132e43FC44348881DA8";
        readonly 248163216: "0x77Aa40B105843728088c0132e43FC44348881DA8";
        readonly 1942764459484029: "0x77Aa40B105843728088c0132e43FC44348881DA8";
    };
    readonly abi: readonly [{
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "addStake";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "subnetId";
            readonly internalType: "struct SubnetID";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "root";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "route";
                readonly internalType: "address[]";
                readonly type: "address[]";
            }];
        }, {
            readonly name: "to";
            readonly internalType: "struct FvmAddress";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "addrType";
                readonly internalType: "uint8";
                readonly type: "uint8";
            }, {
                readonly name: "payload";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "fund";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "subnetId";
            readonly internalType: "struct SubnetID";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "root";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "route";
                readonly internalType: "address[]";
                readonly type: "address[]";
            }];
        }, {
            readonly name: "to";
            readonly internalType: "struct FvmAddress";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "addrType";
                readonly internalType: "uint8";
                readonly type: "uint8";
            }, {
                readonly name: "payload";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "fundWithToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "kill";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "genesisCircSupply";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "collateral";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "register";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "struct FvmAddress";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "addrType";
                readonly internalType: "uint8";
                readonly type: "uint8";
            }, {
                readonly name: "payload";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "release";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "releaseStake";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "epoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }];
        readonly name: "NewBottomUpMsgBatch";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "subnet";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "message";
            readonly internalType: "struct IpcEnvelope";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "kind";
                readonly internalType: "enum IpcMsgKind";
                readonly type: "uint8";
            }, {
                readonly name: "to";
                readonly internalType: "struct IPCAddress";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "subnetId";
                    readonly internalType: "struct SubnetID";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "root";
                        readonly internalType: "uint64";
                        readonly type: "uint64";
                    }, {
                        readonly name: "route";
                        readonly internalType: "address[]";
                        readonly type: "address[]";
                    }];
                }, {
                    readonly name: "rawAddress";
                    readonly internalType: "struct FvmAddress";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "addrType";
                        readonly internalType: "uint8";
                        readonly type: "uint8";
                    }, {
                        readonly name: "payload";
                        readonly internalType: "bytes";
                        readonly type: "bytes";
                    }];
                }];
            }, {
                readonly name: "from";
                readonly internalType: "struct IPCAddress";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "subnetId";
                    readonly internalType: "struct SubnetID";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "root";
                        readonly internalType: "uint64";
                        readonly type: "uint64";
                    }, {
                        readonly name: "route";
                        readonly internalType: "address[]";
                        readonly type: "address[]";
                    }];
                }, {
                    readonly name: "rawAddress";
                    readonly internalType: "struct FvmAddress";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "addrType";
                        readonly internalType: "uint8";
                        readonly type: "uint8";
                    }, {
                        readonly name: "payload";
                        readonly internalType: "bytes";
                        readonly type: "bytes";
                    }];
                }];
            }, {
                readonly name: "nonce";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "value";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "message";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
            readonly indexed: false;
        }];
        readonly name: "NewTopDownMessage";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressInsufficientBalance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AlreadyRegisteredSubnet";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CallFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CannotReleaseZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InsufficientFunds";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidActorAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "reason";
            readonly internalType: "enum InvalidXnetMessageReason";
            readonly type: "uint8";
        }];
        readonly name: "InvalidXnetMessage";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "reason";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "MethodNotAllowed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotEmptySubnetCircSupply";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotEnoughBalance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotEnoughFunds";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotEnoughFundsToRelease";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotRegisteredSubnet";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ReentrancyError";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "SafeERC20FailedOperation";
    }];
};
declare const iMachineFacadeAbi: readonly [{
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "kind";
        readonly internalType: "uint8";
        readonly type: "uint8";
        readonly indexed: true;
    }, {
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "metadata";
        readonly internalType: "bytes";
        readonly type: "bytes";
        readonly indexed: false;
    }];
    readonly name: "MachineCreated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "kind";
        readonly internalType: "uint8";
        readonly type: "uint8";
        readonly indexed: true;
    }, {
        readonly name: "machineAddress";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "MachineInitialized";
}];
/**
 * -
 * - [__View Contract on Filecoin Calibration Filscan__](https://calibration.filscan.io/address/0xd1239c6b6f806EC3752df12CEaddD88187BCf1E5)
 */
declare const recallErc20Abi: readonly [{
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "allowance";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "approve";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "balanceOf";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "totalSupply";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "transfer";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "transferFrom";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Approval";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Transfer";
}];
/**
 * -
 * - [__View Contract on Filecoin Calibration Filscan__](https://calibration.filscan.io/address/0xd1239c6b6f806EC3752df12CEaddD88187BCf1E5)
 */
declare const recallErc20Address: {
    readonly 31337: "0x4A679253410272dd5232B3Ff7cF5dbB88f295319";
    readonly 314159: "0xd1239c6b6f806EC3752df12CEaddD88187BCf1E5";
};
/**
 * -
 * - [__View Contract on Filecoin Calibration Filscan__](https://calibration.filscan.io/address/0xd1239c6b6f806EC3752df12CEaddD88187BCf1E5)
 */
declare const recallErc20Config: {
    readonly address: {
        readonly 31337: "0x4A679253410272dd5232B3Ff7cF5dbB88f295319";
        readonly 314159: "0xd1239c6b6f806EC3752df12CEaddD88187BCf1E5";
    };
    readonly abi: readonly [{
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "allowance";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "transfer";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "Approval";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "Transfer";
    }];
};
/**
 * -
 * - [__View Contract on Filecoin Calibration Filscan__](https://calibration.filscan.io/address/0xE8090d55E7ecc0565830845Df67bfD3fA81D4158)
 */
declare const subnetGetterFacetAbi: readonly [{
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getGateway";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getSubnetActorCheckpointerFacet";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getSubnetActorCheckpointerSelectors";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4[]";
        readonly type: "bytes4[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getSubnetActorGetterFacet";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getSubnetActorGetterSelectors";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4[]";
        readonly type: "bytes4[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getSubnetActorManagerFacet";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getSubnetActorManagerSelectors";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4[]";
        readonly type: "bytes4[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getSubnetActorPauserFacet";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getSubnetActorPauserSelectors";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4[]";
        readonly type: "bytes4[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getSubnetActorRewarderFacet";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getSubnetActorRewarderSelectors";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4[]";
        readonly type: "bytes4[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "nonce";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }];
    readonly name: "getSubnetDeployedByNonce";
    readonly outputs: readonly [{
        readonly name: "subnet";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getUserLastNonce";
    readonly outputs: readonly [{
        readonly name: "nonce";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "latestSubnetDeployed";
    readonly outputs: readonly [{
        readonly name: "subnet";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newGetterFacet";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "newManagerFacet";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "newSubnetGetterSelectors";
        readonly internalType: "bytes4[]";
        readonly type: "bytes4[]";
    }, {
        readonly name: "newSubnetManagerSelectors";
        readonly internalType: "bytes4[]";
        readonly type: "bytes4[]";
    }];
    readonly name: "updateReferenceSubnetContract";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CannotFindSubnet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FacetCannotBeZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotOwner";
}];
/**
 * -
 * - [__View Contract on Filecoin Calibration Filscan__](https://calibration.filscan.io/address/0xE8090d55E7ecc0565830845Df67bfD3fA81D4158)
 */
declare const subnetGetterFacetAddress: {
    readonly 31337: "0x322813Fd9A801c5507c9de605d63CEA4f2CE6c44";
    readonly 314159: "0xE8090d55E7ecc0565830845Df67bfD3fA81D4158";
    readonly 2481632: "0x74539671A1D2F1c8f200826bAbA665179F53a1b7";
    readonly 248163216: "0x74539671A1D2F1c8f200826bAbA665179F53a1b7";
    readonly 1942764459484029: "0x74539671A1D2F1c8f200826bAbA665179F53a1b7";
};
/**
 * -
 * - [__View Contract on Filecoin Calibration Filscan__](https://calibration.filscan.io/address/0xE8090d55E7ecc0565830845Df67bfD3fA81D4158)
 */
declare const subnetGetterFacetConfig: {
    readonly address: {
        readonly 31337: "0x322813Fd9A801c5507c9de605d63CEA4f2CE6c44";
        readonly 314159: "0xE8090d55E7ecc0565830845Df67bfD3fA81D4158";
        readonly 2481632: "0x74539671A1D2F1c8f200826bAbA665179F53a1b7";
        readonly 248163216: "0x74539671A1D2F1c8f200826bAbA665179F53a1b7";
        readonly 1942764459484029: "0x74539671A1D2F1c8f200826bAbA665179F53a1b7";
    };
    readonly abi: readonly [{
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getGateway";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getSubnetActorCheckpointerFacet";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getSubnetActorCheckpointerSelectors";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4[]";
            readonly type: "bytes4[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getSubnetActorGetterFacet";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getSubnetActorGetterSelectors";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4[]";
            readonly type: "bytes4[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getSubnetActorManagerFacet";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getSubnetActorManagerSelectors";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4[]";
            readonly type: "bytes4[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getSubnetActorPauserFacet";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getSubnetActorPauserSelectors";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4[]";
            readonly type: "bytes4[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getSubnetActorRewarderFacet";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getSubnetActorRewarderSelectors";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4[]";
            readonly type: "bytes4[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "nonce";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }];
        readonly name: "getSubnetDeployedByNonce";
        readonly outputs: readonly [{
            readonly name: "subnet";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "user";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getUserLastNonce";
        readonly outputs: readonly [{
            readonly name: "nonce";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "latestSubnetDeployed";
        readonly outputs: readonly [{
            readonly name: "subnet";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newGetterFacet";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "newManagerFacet";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "newSubnetGetterSelectors";
            readonly internalType: "bytes4[]";
            readonly type: "bytes4[]";
        }, {
            readonly name: "newSubnetManagerSelectors";
            readonly internalType: "bytes4[]";
            readonly type: "bytes4[]";
        }];
        readonly name: "updateReferenceSubnetContract";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CannotFindSubnet";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FacetCannotBeZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotOwner";
    }];
};

export { blobManagerAbi, blobManagerAddress, blobManagerConfig, bucketManagerAbi, bucketManagerAddress, bucketManagerConfig, creditManagerAbi, creditManagerAddress, creditManagerConfig, gatewayManagerFacetAbi, gatewayManagerFacetAddress, gatewayManagerFacetConfig, iMachineFacadeAbi, recallErc20Abi, recallErc20Address, recallErc20Config, subnetGetterFacetAbi, subnetGetterFacetAddress, subnetGetterFacetConfig };
