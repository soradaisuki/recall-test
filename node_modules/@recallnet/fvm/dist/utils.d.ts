type base32Variant = "RFC3548" | "RFC4648" | "RFC4648-HEX" | "Crockford";
type base32Options = {
    padding: boolean;
};
/**
 * Encodes a Uint8Array to a base32 string
 * @param data - input Uint8Array to encode
 * @param variant - base32 variant to use
 * @param options - base32 options
 * @returns base32 encoded string
 */
declare function encode$3(data: ArrayBuffer, variant?: base32Variant, options?: base32Options): string;
/**
 * Decodes a base32 string to a Uint8Array
 * @param input - base32 encoded string to decode
 * @param variant - base32 variant to use
 * @returns decoded Uint8Array
 */
declare function decode$3(input: string, variant?: base32Variant): ArrayBuffer;

type base32_base32Options = base32Options;
type base32_base32Variant = base32Variant;
declare namespace base32 {
  export { type base32_base32Options as base32Options, type base32_base32Variant as base32Variant, decode$3 as decode, encode$3 as encode };
}

declare function decode$2(data: Uint8Array | string): any;
declare function encode$2(data: any): Uint8Array<ArrayBufferLike>;

declare namespace cbor {
  export { decode$2 as decode, encode$2 as encode };
}

/**
 * Convert a bigint to a Uint8Array
 * @param value - The bigint to convert
 * @param pad - Whether to pad the result to 2 bytes
 * @returns The Uint8Array
 */
declare function bigintToUint8Array(value: string | bigint | number, pad?: boolean): Uint8Array;
/**
 * Convert a string, number, bigint, or Uint8Array to a bigint. Copied from ethers.js.
 * @param value - The value to convert
 * @returns The bigint
 */
declare function toBigInt(value: string | number | bigint | Uint8Array): bigint;

/**
 * Stream class for reading and writing LEB128 encoded data
 */
declare class Stream {
    buffer: Uint8Array;
    _bytesRead: number;
    constructor(buf?: Uint8Array<ArrayBuffer>);
    read(size: number): Uint8Array<ArrayBuffer>;
    write(buf: Uint8Array): void;
}

/**
 * Reads a signed LEB128 encoded integer from a stream
 * @param stream - stream to read from
 * @returns signed LEB128 encoded integer
 */
declare function read$1(stream: Stream): string;
/**
 * Reads a signed LEB128 encoded integer from a stream
 * @param stream - stream to read from
 * @returns signed LEB128 encoded integer
 */
declare function readBigInt$1(stream: Stream): bigint;
/**
 * Writes a signed LEB128 encoded integer to a stream
 * @param number - number to write
 * @param stream - stream to write to
 */
declare function write$1(number: number | string | bigint, stream: Stream): void;
/**
 * LEB128 encodes an integer
 * @param num - number to encode
 * @returns LEB128 encoded Uint8Array
 */
declare function encode$1(num: number | string | bigint): Uint8Array;
/**
 * decodes a LEB128 encoded integer
 * @param buffer - buffer to decode
 * @returns decoded string
 */
declare function decode$1(buffer: Uint8Array): string;

declare namespace signed {
  export { decode$1 as decode, encode$1 as encode, read$1 as read, readBigInt$1 as readBigInt, write$1 as write };
}

/**
 * Reads an unsigned LEB128 encoded integer from a stream
 * @param stream - stream to read from
 * @returns unsigned LEB128 encoded integer
 */
declare function read(stream: Stream): string;
/**
 * Reads an unsigned LEB128 encoded integer from a stream
 * @param stream - stream to read from
 * @returns unsigned LEB128 encoded integer
 */
declare function readBigInt(stream: Stream): bigint;
/**
 * Writes an unsigned LEB128 encoded integer to a stream
 * @param number - number to write
 * @param stream - stream to write to
 */
declare function write(number: number | string | bigint, stream: Stream): void;
/**
 * LEB128 encodes an integer
 * @param num - number to encode
 * @returns LEB128 encoded Uint8Array
 */
declare function encode(num: number | string | bigint): Uint8Array;
/**
 * decodes a LEB128 encoded integer
 * @param buffer - buffer to decode
 * @returns decoded string
 */
declare function decode(buffer: Uint8Array): string;

declare const unsigned_decode: typeof decode;
declare const unsigned_encode: typeof encode;
declare const unsigned_read: typeof read;
declare const unsigned_readBigInt: typeof readBigInt;
declare const unsigned_write: typeof write;
declare namespace unsigned {
  export { unsigned_decode as decode, unsigned_encode as encode, unsigned_read as read, unsigned_readBigInt as readBigInt, unsigned_write as write };
}

declare const index_signed: typeof signed;
declare const index_unsigned: typeof unsigned;
declare namespace index {
  export { index_signed as signed, index_unsigned as unsigned };
}

export { base32, bigintToUint8Array, cbor, index as leb128, toBigInt };
