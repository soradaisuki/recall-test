"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  checkChainIsSupported: () => checkChainIsSupported,
  checkChainName: () => checkChainName,
  checkHasParentChain: () => checkHasParentChain,
  devnet: () => devnet,
  getChain: () => getChain,
  getExplorerUrl: () => getExplorerUrl,
  getObjectApiUrl: () => getObjectApiUrl,
  getParentChain: () => getParentChain,
  getRegistrarUrl: () => getRegistrarUrl,
  localnet: () => localnet,
  supportedChains: () => supportedChains,
  testnet: () => testnet
});
module.exports = __toCommonJS(index_exports);
var import_viem = require("viem");
var import_chains = require("viem/chains");
var import_network_constants = require("@recallnet/network-constants");
var testnet = (0, import_viem.defineChain)({
  id: Number(import_network_constants.TESTNET_CHAIN_ID),
  name: "Recall Testnet",
  fees: {
    baseFeeMultiplier: 120
  },
  nativeCurrency: {
    name: "Recall",
    symbol: "RECALL",
    decimals: 18
  },
  rpcUrls: {
    default: {
      http: [import_network_constants.TESTNET_EVM_RPC_URL],
      webSocket: [import_network_constants.TESTNET_EVM_WS_URL]
    }
  },
  blockExplorers: {
    default: {
      name: "Recall Testnet Explorer",
      url: import_network_constants.TESTNET_EXPLORER_URL
    }
  }
});
var localnet = (0, import_viem.defineChain)({
  id: Number(import_network_constants.LOCALNET_CHAIN_ID),
  name: "Recall Localnet",
  fees: {
    baseFeeMultiplier: 120
  },
  nativeCurrency: {
    name: "Recall",
    symbol: "RECALL",
    decimals: 18
  },
  rpcUrls: {
    default: {
      http: [import_network_constants.LOCALNET_EVM_RPC_URL],
      webSocket: [import_network_constants.LOCALNET_EVM_WS_URL]
    }
  },
  blockExplorers: {
    default: {
      name: "Recall Localnet Explorer",
      url: import_network_constants.LOCALNET_EXPLORER_URL
    }
  }
});
var devnet = (0, import_viem.defineChain)({
  id: Number(import_network_constants.DEVNET_CHAIN_ID),
  name: "Recall Devnet",
  fees: {
    baseFeeMultiplier: 120
  },
  nativeCurrency: {
    name: "Recall",
    symbol: "RECALL",
    decimals: 18
  },
  rpcUrls: {
    default: {
      http: [import_network_constants.DEVNET_EVM_RPC_URL]
    }
  },
  blockExplorers: {
    default: {
      name: "Recall Devnet Explorer",
      url: import_network_constants.DEVNET_EXPLORER_URL
    }
  }
});
function supportedChains(isLocalDev = false) {
  const chains = [testnet, import_chains.filecoinCalibration];
  if (isLocalDev) {
    chains.push(localnet, devnet, import_chains.anvil);
  }
  chains.sort((a, b) => a.name > b.name ? 1 : -1);
  return chains;
}
function checkChainIsSupported(chain) {
  return supportedChains(true).some((c) => c.id === chain.id);
}
function getChain(chainIdOrName) {
  const chains = supportedChains(true);
  const chain = chains.find(
    (c) => c.id === chainIdOrName || c.name.toLowerCase().includes(chainIdOrName.toString().toLowerCase())
  );
  if (chain) {
    return chain;
  }
  throw new Error(`Chain ${chainIdOrName} not found`);
}
function checkHasParentChain(chain) {
  if (!checkChainIsSupported(chain))
    throw new Error(`Chain ${chain.name} not found`);
  switch (chain.id) {
    case testnet.id:
    case localnet.id:
      return true;
    default:
      return false;
  }
}
function getParentChain(chain) {
  switch (chain.id) {
    case testnet.id:
      return import_chains.filecoinCalibration;
    case localnet.id:
      return import_chains.anvil;
    default:
      return void 0;
  }
}
function checkChainName(chainName) {
  try {
    getChain(chainName);
    return true;
  } catch {
    return false;
  }
}
function getObjectApiUrl(chain) {
  switch (chain.id) {
    case testnet.id:
      return import_network_constants.TESTNET_OBJECT_API_URL;
    case localnet.id:
      return import_network_constants.LOCALNET_OBJECT_API_URL;
    case devnet.id:
      return import_network_constants.DEVNET_OBJECT_API_URL;
    default:
      throw new Error(`Object API URL not found for chain ${chain.name}`);
  }
}
function getRegistrarUrl(chain) {
  switch (chain.id) {
    case testnet.id:
      return import_network_constants.TESTNET_REGISTRAR_URL;
    default:
      throw new Error(`Registrar URL not found for chain ${chain.name}`);
  }
}
function getExplorerUrl(chain) {
  switch (chain.id) {
    case testnet.id:
      return import_network_constants.TESTNET_EXPLORER_URL;
    case localnet.id:
      return import_network_constants.LOCALNET_EXPLORER_URL;
    case devnet.id:
      return import_network_constants.DEVNET_EXPLORER_URL;
    default:
      throw new Error(`Explorer URL not found for chain ${chain.name}`);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  checkChainIsSupported,
  checkChainName,
  checkHasParentChain,
  devnet,
  getChain,
  getExplorerUrl,
  getObjectApiUrl,
  getParentChain,
  getRegistrarUrl,
  localnet,
  supportedChains,
  testnet
});
