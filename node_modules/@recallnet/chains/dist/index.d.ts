import { Chain } from 'viem/chains';

/**
 * Supported Recall Network chain names.
 */
type ChainName = "mainnet" | "testnet" | "localnet" | "devnet";
/**
 * Recall Testnet chain configuration.
 *
 * Defines the chain ID, RPC URLs, native currency, and other configuration for the Recall Testnet.
 */
declare const testnet: Chain;
/**
 * Recall Localnet chain configuration.
 *
 * Defines the chain ID, RPC URLs, native currency, and other configuration for the Recall Localnet (local development environment).
 */
declare const localnet: Chain;
/**
 * Recall Devnet chain configuration.
 *
 * Defines the chain ID, RPC URLs, native currency, and other configuration for the Recall Devnet (development environment).
 */
declare const devnet: Chain;
/**
 * Get all supported chains.
 *
 * Returns an array of all supported chains, optionally including local development chains.
 *
 * @example
 * ```typescript
 * // Get production chains only
 * const chains = supportedChains();
 *
 * // Include local development chains
 * const allChains = supportedChains(true);
 * ```
 *
 * @param isLocalDev - Whether to include local development chains (Localnet, Devnet, Anvil)
 * @returns Array of supported chain configurations
 */
declare function supportedChains(isLocalDev?: boolean): Chain[];
/**
 * Check if a chain is supported.
 *
 * @example
 * ```typescript
 * const isSupported = checkChainIsSupported(testnet);
 * // Returns: true
 * ```
 *
 * @param chain - The chain to check
 * @returns True if the chain is supported, false otherwise
 */
declare function checkChainIsSupported(chain: Chain): boolean;
/**
 * Get a chain by ID or name.
 *
 * @example
 * ```typescript
 * // Get by name
 * const chain = getChain("testnet");
 *
 * // Get by ID
 * const sameChain = getChain(2481632);
 * ```
 *
 * @param chainIdOrName - The chain ID or name to look up
 * @returns The corresponding chain configuration
 * @throws Will throw an error if the chain is not found
 */
declare function getChain(chainIdOrName: number | ChainName): Chain;
/**
 * Check if a chain has a parent chain.
 *
 * Some Recall chains are connected to parent chains (e.g., Testnet to Filecoin Calibration).
 * This function checks if a given chain has a parent chain.
 *
 * @example
 * ```typescript
 * const hasParent = checkHasParentChain(testnet);
 * // Returns: true
 * ```
 *
 * @param chain - The chain to check
 * @returns True if the chain has a parent chain, false otherwise
 * @throws Will throw an error if the chain is not supported
 */
declare function checkHasParentChain(chain: Chain): boolean;
/**
 * Get the parent chain for a given chain.
 *
 * @example
 * ```typescript
 * const parentChain = getParentChain(testnet);
 * // Returns: filecoinCalibration
 * ```
 *
 * @param chain - The child chain
 * @returns The parent chain, or undefined if the chain doesn't have a parent
 */
declare function getParentChain(chain: Chain): Chain | undefined;
/**
 * Check if a chain name is valid.
 *
 * @example
 * ```typescript
 * const isValid = checkChainName("testnet");
 * // Returns: true
 *
 * const isInvalid = checkChainName("unknown");
 * // Returns: false
 * ```
 *
 * @param chainName - The chain name to check (e.g., "testnet", "localnet", "devnet")
 * @returns True if the chain name is valid, false otherwise
 */
declare function checkChainName(chainName: string): boolean;
/**
 * Get the Object API URL for a chain.
 *
 * @example
 * ```typescript
 * const apiUrl = getObjectApiUrl(testnet);
 * // Returns: "https://objects.testnet.recall.chain.love"
 * ```
 *
 * @param chain - The chain to get the Object API URL for
 * @returns The Object API URL for the specified chain
 * @throws Will throw an error if the Object API URL is not defined for the chain
 */
declare function getObjectApiUrl(chain: Chain): string;
/**
 * Get the Registrar URL for a chain.
 *
 * @example
 * ```typescript
 * const registrarUrl = getRegistrarUrl(testnet);
 * // Returns: "https://faucet.node-0.testnet.recall.network"
 * ```
 *
 * @param chain - The chain to get the Registrar URL for
 * @returns The Registrar URL for the specified chain
 * @throws Will throw an error if the Registrar URL is not defined for the chain
 */
declare function getRegistrarUrl(chain: Chain): string;
/**
 * Get the Explorer URL for a chain.
 *
 * @example
 * ```typescript
 * const explorerUrl = getExplorerUrl(testnet);
 * // Returns: "https://explorer.testnet.recall.network"
 * ```
 *
 * @param chain - The chain to get the Explorer URL for
 * @returns The Explorer URL for the specified chain
 * @throws Will throw an error if the Explorer URL is not defined for the chain
 */
declare function getExplorerUrl(chain: Chain): string;

export { type ChainName, checkChainIsSupported, checkChainName, checkHasParentChain, devnet, getChain, getExplorerUrl, getObjectApiUrl, getParentChain, getRegistrarUrl, localnet, supportedChains, testnet };
