// src/utils.ts
import {
  parseEventLogs
} from "viem";
import { hexToBytes } from "viem";
import { AddressId } from "@recallnet/fvm/address";
import { leb128 } from "@recallnet/fvm/utils";
function bytesToBase64(bytes, safeUrl = true) {
  const binary = String.fromCodePoint(...bytes);
  let base64;
  if (typeof globalThis.btoa === "function") {
    base64 = globalThis.btoa(binary);
  } else if (typeof Buffer !== "undefined") {
    base64 = Buffer.from(binary, "binary").toString("base64");
  } else {
    throw new Error("Environment not supported for Base64 encoding");
  }
  return safeUrl ? base64.replace(/\+/g, "-").replace(/\//g, "_") : base64;
}
function hexToBase64(hex, safeUrl = true) {
  const bytes = hexToBytes(hex);
  return bytesToBase64(bytes, safeUrl);
}
function snakeToCamel(obj) {
  return Object.fromEntries(
    Object.entries(obj).map(([key, value]) => [
      key.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase()),
      value
    ])
  );
}
function camelToSnake(obj) {
  return Object.fromEntries(
    Object.entries(obj).map(([key, value]) => [
      key.replace(/([A-Z])/g, "_$1").toLowerCase(),
      // Recursively transform nested objects
      value && typeof value === "object" && !Array.isArray(value) ? camelToSnake(value) : value
    ])
  );
}
var createFileHandler = () => ({
  async readFile(input) {
    if (typeof File !== "undefined" && input instanceof File) {
      const data2 = new Uint8Array(await input.arrayBuffer());
      return {
        data: data2,
        contentType: input.type,
        size: BigInt(input.size)
      };
    }
    if (typeof input === "string") {
      if (typeof window !== "undefined") {
        throw new Error("File paths are not supported in browser environment");
      }
      const fs = await import(
        /* webpackIgnore: true */
        "fs/promises"
      ).catch(
        () => null
      );
      if (!fs) {
        throw new Error("File system not available in this environment");
      }
      const data2 = await fs.readFile(input);
      const { fileTypeFromBuffer } = await import("file-type");
      const type = await fileTypeFromBuffer(data2);
      return {
        data: new Uint8Array(data2),
        contentType: type?.mime || "application/octet-stream",
        size: BigInt(data2.length)
      };
    }
    const data = input instanceof Uint8Array ? input : new Uint8Array(await input.arrayBuffer());
    return {
      data,
      contentType: "application/octet-stream",
      size: BigInt(data.length)
    };
  }
});
async function parseEventFromTransaction(client, abi, eventName, hash) {
  const receipt = await client.waitForTransactionReceipt({
    hash
  });
  const logs = parseEventLogs({
    abi,
    logs: receipt.logs
  });
  const log = logs.find((log2) => log2.eventName === eventName);
  if (!log) {
    throw new Error(`Event ${eventName} not found`);
  }
  return log.args;
}
function convertMetadataToAbiParams(value) {
  return Object.entries(value).map(([key, value2]) => ({ key, value: value2 }));
}
function convertAbiMetadataToObject(metadata) {
  return metadata.reduce(
    (acc, { key, value }) => {
      acc[key] = value;
      return acc;
    },
    {}
  );
}
function actorIdToMaskedEvmAddress(actorId) {
  const actorIdBytes = new Uint8Array([
    0,
    ...leb128.unsigned.encode(actorId)
  ]);
  return AddressId.fromBytes(actorIdBytes).toEthAddressHex();
}

export {
  hexToBase64,
  snakeToCamel,
  camelToSnake,
  createFileHandler,
  parseEventFromTransaction,
  convertMetadataToAbiParams,
  convertAbiMetadataToObject,
  actorIdToMaskedEvmAddress
};
