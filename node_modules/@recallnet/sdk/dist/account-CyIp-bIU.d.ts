import { GetContractReturnType, Client, Address, ContractFunctionArgs, AbiStateMutability, ContractFunctionReturnType, GetEventArgs, PublicClient, Transport, Chain, WalletClient, Account, GetBalanceReturnType } from 'viem';
import { blobManagerAbi, bucketManagerAbi, iMachineFacadeAbi, creditManagerAbi, recallErc20Abi } from '@recallnet/contracts';
import { ChainName } from '@recallnet/chains';
import { SubnetId, GatewayManager } from './ipc.js';
import { Result } from './utils.js';

type BlobInfo = ContractFunctionReturnType<typeof blobManagerAbi, AbiStateMutability, "getBlob">;
type AddedBlobs = ContractFunctionReturnType<typeof blobManagerAbi, AbiStateMutability, "getAddedBlobs">;
type PendingBlobs = ContractFunctionReturnType<typeof blobManagerAbi, AbiStateMutability, "getPendingBlobs">;
type PendingBlobsCount = ContractFunctionReturnType<typeof blobManagerAbi, AbiStateMutability, "getPendingBlobsCount">;
type PendingBytesCount = ContractFunctionReturnType<typeof blobManagerAbi, AbiStateMutability, "getPendingBytesCount">;
type StorageStats = ContractFunctionReturnType<typeof blobManagerAbi, AbiStateMutability, "getStorageStats">;
type BlobStatus = ContractFunctionReturnType<typeof blobManagerAbi, AbiStateMutability, "getBlobStatus">;
type StorageUsage = ContractFunctionReturnType<typeof blobManagerAbi, AbiStateMutability, "getStorageUsage">;
type SubnetStats = ContractFunctionReturnType<typeof blobManagerAbi, AbiStateMutability, "getSubnetStats">;
type AddBlobFullParams = ContractFunctionArgs<typeof blobManagerAbi, AbiStateMutability, "addBlob">;
type AddBlobParams = Extract<AddBlobFullParams[0], {
    sponsor: Address;
    source: string;
    blobHash: string;
    metadataHash: string;
    subscriptionId: string;
    size: bigint;
    ttl: bigint;
    from: Address;
}>;
type AddBlobOptions = {
    ttl?: bigint;
    sponsor?: Address;
};
type GetBlobParams = ContractFunctionArgs<typeof blobManagerAbi, AbiStateMutability, "getBlob">;
type GetBlobStatusParams = ContractFunctionArgs<typeof blobManagerAbi, AbiStateMutability, "getBlobStatus">;
type DeleteBlobParams = ContractFunctionArgs<typeof blobManagerAbi, AbiStateMutability, "deleteBlob">;
type OverwriteBlobParams = ContractFunctionArgs<typeof blobManagerAbi, AbiStateMutability, "overwriteBlob">;
declare class BlobManager {
    client: RecallClient;
    contract: GetContractReturnType<typeof blobManagerAbi, Client, Address>;
    constructor(client: RecallClient, contractAddress?: Address);
    getContract(): GetContractReturnType<typeof blobManagerAbi, Client, Address>;
    addBlobInner(addParams: AddBlobParams): Promise<Result>;
    addBlob(blobHash: string, subscriptionId: string, size: bigint, options?: AddBlobOptions): Promise<Result>;
    deleteBlob(blobHash: string, subscriptionId: string, subscriber?: Address): Promise<Result>;
    getBlob(blobHash: string, blockNumber?: bigint): Promise<Result<BlobInfo>>;
    getBlobStatus(subscriber: Address, blobHash: string, subscriptionId: string, blockNumber?: bigint): Promise<Result<BlobStatus>>;
    overwriteBlobInner(oldHash: string, addParams: AddBlobParams): Promise<Result>;
    overwriteBlob(oldHash: string, newHash: string, subscriptionId: string, size: bigint, options?: AddBlobOptions): Promise<Result>;
    getAddedBlobs(size: number, blockNumber?: bigint): Promise<Result<AddedBlobs>>;
    getPendingBlobs(size: number, blockNumber?: bigint): Promise<Result<PendingBlobs>>;
    getPendingBlobsCount(blockNumber?: bigint): Promise<Result<PendingBlobsCount>>;
    getPendingBytesCount(blockNumber?: bigint): Promise<Result<PendingBytesCount>>;
    getStorageStats(blockNumber?: bigint): Promise<Result<StorageStats>>;
    getStorageUsage(address?: Address, blockNumber?: bigint): Promise<Result<StorageUsage>>;
    getSubnetStats(blockNumber?: bigint): Promise<Result<SubnetStats>>;
}

type AddOptions = {
    ttl?: bigint;
    metadata?: Record<string, string>;
    overwrite?: boolean;
};
type ObjectValueRaw = ContractFunctionReturnType<typeof bucketManagerAbi, AbiStateMutability, "getObject">;
type ObjectValue = Pick<ObjectValueRaw, "blobHash" | "recoveryHash" | "size" | "expiry"> & {
    metadata: Record<string, unknown>;
};
type ListResultRaw = ContractFunctionReturnType<typeof bucketManagerAbi, AbiStateMutability, "listBuckets">;
type ListResultRawBucket = ListResultRaw[number];
type ListResultBucket = Pick<ListResultRawBucket, "kind" | "addr"> & {
    metadata: Record<string, unknown>;
};
type ListResult = ListResultBucket[];
type QueryResultRaw = ContractFunctionReturnType<typeof bucketManagerAbi, "view", "queryObjects", [
    bucket: `0x${string}`,
    prefix: string,
    delimiter: string,
    startKey: string,
    limit: bigint
]>;
type QueryObjectValue = Omit<QueryResultRaw["objects"][number]["state"], "metadata"> & {
    metadata: Record<string, unknown>;
};
type QueryResultObject = {
    key: QueryResultRaw["objects"][number]["key"];
    state: QueryObjectValue;
};
type QueryResult = Omit<QueryResultRaw, "objects"> & {
    objects: QueryResultObject[];
};
type QueryOptions = {
    prefix?: string;
    delimiter?: string;
    startKey?: string;
    limit?: number;
    blockNumber?: bigint;
};
type CreateBucketEvent = Required<GetEventArgs<typeof iMachineFacadeAbi, "MachineInitialized", {
    IndexedOnly: false;
}>>;
type CreateBucketResult = {
    bucket: Address;
};
type CreateBucketParams = Extract<ContractFunctionArgs<typeof bucketManagerAbi, AbiStateMutability, "createBucket">, readonly [Address, readonly {
    key: string;
    value: string;
}[]]>;
type GetObjectParams = ContractFunctionArgs<typeof bucketManagerAbi, AbiStateMutability, "getObject">;
type DeleteObjectParams = ContractFunctionArgs<typeof bucketManagerAbi, AbiStateMutability, "deleteObject">;
type QueryObjectsParams = ContractFunctionArgs<typeof bucketManagerAbi, AbiStateMutability, "queryObjects">;
type AddObjectFullParams = ContractFunctionArgs<typeof bucketManagerAbi, AbiStateMutability, "addObject">;
type AddObjectParams = Extract<AddObjectFullParams[1], {
    source: string;
    key: string;
    blobHash: string;
    recoveryHash: string;
    size: bigint;
    ttl: bigint;
    metadata: readonly {
        key: string;
        value: string;
    }[];
    overwrite: boolean;
    from: Address;
}>;
declare class BucketManager {
    private fileHandler;
    client: RecallClient;
    contract: GetContractReturnType<typeof bucketManagerAbi, Client, Address>;
    constructor(client: RecallClient, contractAddress?: Address);
    getContract(): GetContractReturnType<typeof bucketManagerAbi, Client, Address>;
    create({ owner, metadata, }?: {
        owner?: Address;
        metadata?: Record<string, string>;
    }): Promise<Result<CreateBucketResult>>;
    list(owner?: Address, blockNumber?: bigint): Promise<Result<ListResult>>;
    private executeAdd;
    add(bucket: Address, key: string, file: string | File | Uint8Array, options?: AddOptions): Promise<Result>;
    delete(bucket: Address, key: string): Promise<Result>;
    getObjectValue(bucket: Address, key: string, blockNumber?: bigint): Promise<Result<ObjectValue>>;
    get(bucket: Address, key: string, options?: {
        range?: {
            start?: number;
            end?: number;
        };
        blockNumber?: bigint;
    }): Promise<Result<Uint8Array>>;
    getStream(bucket: Address, key: string, range?: {
        start: number;
        end?: number;
    }, blockNumber?: bigint): Promise<Result<ReadableStream<Uint8Array>>>;
    query(bucket: Address, options?: QueryOptions): Promise<Result<QueryResult>>;
    private executeQuery;
}

type CreditBalance = ContractFunctionReturnType<typeof creditManagerAbi, AbiStateMutability, "getCreditBalance">;
type CreditAccount = ContractFunctionReturnType<typeof creditManagerAbi, AbiStateMutability, "getAccount">;
type CreditApproval = Pick<CreditAccount, "approvalsTo" | "approvalsFrom">;
type CreditStats = ContractFunctionReturnType<typeof creditManagerAbi, AbiStateMutability, "getCreditStats">;
type ApproveCreditParams = ContractFunctionArgs<typeof creditManagerAbi, AbiStateMutability, "approveCredit">;
type RevokeCreditParams = ContractFunctionArgs<typeof creditManagerAbi, AbiStateMutability, "revokeCredit">;
type BuyCreditParams = ContractFunctionArgs<typeof creditManagerAbi, AbiStateMutability, "buyCredit">;
type GetCreditBalanceParams = ContractFunctionArgs<typeof creditManagerAbi, AbiStateMutability, "getCreditBalance">;
type GetAccountParams = ContractFunctionArgs<typeof creditManagerAbi, AbiStateMutability, "getAccount">;
type SetAccountSponsorParams = ContractFunctionArgs<typeof creditManagerAbi, AbiStateMutability, "setAccountSponsor">;
declare class CreditManager {
    client: RecallClient;
    contract: GetContractReturnType<typeof creditManagerAbi, Client, Address>;
    constructor(client: RecallClient, contractAddress?: Address);
    getContract(): GetContractReturnType<typeof creditManagerAbi, Client, Address>;
    approve(to: Address, caller?: Address[], creditLimit?: bigint, gasFeeLimit?: bigint, ttl?: bigint, from?: Address): Promise<Result>;
    buy(amount: bigint, to?: Address): Promise<Result>;
    revoke(to: Address, requiredCaller?: Address, from?: Address): Promise<Result>;
    setAccountSponsor(sponsor: Address, from?: Address): Promise<Result>;
    getAccount(address?: Address, blockNumber?: bigint): Promise<Result<CreditAccount>>;
    getCreditApprovals(forAddress?: Address, { filterFrom, filterTo, blockNumber, }?: {
        filterFrom?: Address;
        filterTo?: Address;
        blockNumber?: bigint;
    }): Promise<Result<CreditApproval>>;
    getCreditBalance(address?: Address, blockNumber?: bigint): Promise<Result<CreditBalance>>;
    getCreditStats(blockNumber?: bigint): Promise<Result<CreditStats>>;
}

declare const createPublicClientForChain: (chain: Chain) => PublicClient<Transport, Chain>;
declare const walletClientFromPrivateKey: (privateKey: string, chain?: Chain) => WalletClient<Transport, Chain, Account>;
type ContractConfig = Record<number, Address>;
type ContractOverrides = {
    bucketManager?: ContractConfig;
    blobManager?: ContractConfig;
    creditManager?: ContractConfig;
    accountManager?: {
        gatewayManager?: ContractConfig;
        recallErc20?: ContractConfig;
    };
};
interface RecallConfig {
    publicClient?: PublicClient<Transport, Chain>;
    walletClient?: WalletClient<Transport, Chain, Account>;
    contractOverrides?: ContractOverrides;
}
declare class RecallClient {
    publicClient: PublicClient<Transport, Chain>;
    walletClient: WalletClient<Transport, Chain, Account> | undefined;
    contractOverrides: ContractOverrides;
    subnetId: SubnetId;
    constructor(config?: RecallConfig);
    static fromPrivateKey(privateKey: string, chain?: Chain, contractOverrides?: ContractOverrides): RecallClient;
    static fromChain(chain?: Chain, contractOverrides?: ContractOverrides): RecallClient;
    static fromChainName(chainName?: ChainName): RecallClient;
    switchChain(chain: Chain): Promise<void>;
    getSubnetId(): SubnetId;
    accountManager(): AccountManager;
    blobManager(contractAddress?: Address): BlobManager;
    bucketManager(contractAddress?: Address): BucketManager;
    creditManager(contractAddress?: Address): CreditManager;
}

type AccountInfo = {
    address: Address;
    nonce: number;
    balance: bigint;
    parentBalance?: bigint;
};
type ApproveParams = ContractFunctionArgs<typeof recallErc20Abi, AbiStateMutability, "approve">;
declare class AccountManager {
    client: RecallClient;
    gatewayManager: GatewayManager;
    constructor(client: RecallClient);
    getGatewayManager(): GatewayManager;
    switchSubnet(from: Chain, to: Chain): Promise<{
        change: () => Promise<void>;
        reset: () => Promise<void>;
    }>;
    getSupplySource(chain: Chain, contractAddress?: Address): GetContractReturnType<typeof recallErc20Abi, Client, Address>;
    balance(address?: Address): Promise<Result<GetBalanceReturnType>>;
    info(address?: Address): Promise<Result<AccountInfo>>;
    approve(spender: Address, amount: bigint, contractAddress?: Address): Promise<Result>;
    deposit(amount: bigint, recipient?: Address, contractAddress?: Address): Promise<Result>;
    withdraw(amount: bigint, recipient?: Address, contractAddress?: Address): Promise<Result>;
    transfer(recipient: Address, amount: bigint): Promise<Result>;
}

export { type AccountInfo as $, type AddedBlobs as A, type BlobInfo as B, type CreateBucketEvent as C, type DeleteBlobParams as D, type CreditBalance as E, type CreditAccount as F, type GetBlobParams as G, type CreditApproval as H, type CreditStats as I, type ApproveCreditParams as J, type BuyCreditParams as K, type ListResultRaw as L, type GetCreditBalanceParams as M, type GetAccountParams as N, type OverwriteBlobParams as O, type PendingBlobs as P, type QueryResultRaw as Q, type RevokeCreditParams as R, type StorageStats as S, type SetAccountSponsorParams as T, CreditManager as U, createPublicClientForChain as V, walletClientFromPrivateKey as W, type ContractConfig as X, type ContractOverrides as Y, type RecallConfig as Z, RecallClient as _, type PendingBlobsCount as a, type ApproveParams as a0, AccountManager as a1, type PendingBytesCount as b, type BlobStatus as c, type StorageUsage as d, type SubnetStats as e, type AddBlobParams as f, type AddBlobOptions as g, type GetBlobStatusParams as h, BlobManager as i, type AddOptions as j, type ObjectValueRaw as k, type ObjectValue as l, type ListResultRawBucket as m, type ListResultBucket as n, type ListResult as o, type QueryObjectValue as p, type QueryResultObject as q, type QueryResult as r, type QueryOptions as s, type CreateBucketResult as t, type CreateBucketParams as u, type GetObjectParams as v, type DeleteObjectParams as w, type QueryObjectsParams as x, type AddObjectParams as y, BucketManager as z };
