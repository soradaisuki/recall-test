import { Address } from 'viem';
import { SnakeToCamelCase } from './utils.cjs';

type ObjectsApiNodeInfoRaw = {
    node_id: string;
    info: {
        relay_url: string;
        direct_addresses: string[];
    };
};
type ObjectsApiNodeInfo = SnakeToCamelCase<ObjectsApiNodeInfoRaw>;
type ObjectsApiUploadResponseRaw = {
    hash: string;
    metadata_hash: string;
};
type ObjectsApiUploadResponse = SnakeToCamelCase<ObjectsApiUploadResponseRaw>;
type ObjectsApiFormData = {
    data: Uint8Array;
    size: bigint;
    contentType?: string;
};
declare function createObjectsFormData({ data, size, contentType, }: ObjectsApiFormData): FormData;
declare function getObjectsNodeInfo(objectsProviderUrl: string): Promise<ObjectsApiNodeInfo>;
declare function callObjectsApiAddObject(objectsProviderUrl: string, data: Uint8Array, size: bigint, contentType?: string): Promise<ObjectsApiUploadResponse>;
declare function downloadBlob(objectsProviderUrl: string, bucket: Address, key: string, range?: {
    start?: number;
    end?: number;
}, blockNumber?: bigint): Promise<ReadableStream<Uint8Array>>;

export { type ObjectsApiFormData, type ObjectsApiNodeInfo, type ObjectsApiNodeInfoRaw, type ObjectsApiUploadResponse, callObjectsApiAddObject, createObjectsFormData, downloadBlob, getObjectsNodeInfo };
