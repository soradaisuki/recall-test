import { Address } from 'viem';

declare class BucketNotFound extends Error {
    constructor(bucket: string);
}
declare class OutOfGasError extends Error {
    constructor(message: string);
}
declare class CreateBucketError extends Error {
    constructor(message: string);
}
declare class AddObjectError extends Error {
    constructor(message: string);
}
declare class InvalidValue extends Error {
    constructor(message: string);
}
declare class ObjectNotAvailable extends Error {
    constructor(key: string, blobHash: string);
}
declare class ObjectNotFound extends Error {
    constructor(bucket: string, key: string);
}
declare class UnhandledBucketError extends Error {
    constructor(message: string);
}
declare class UnhandledCreditError extends Error {
    constructor(message: string);
}
declare class UnhandledBlobError extends Error {
    constructor(message: string);
}
declare class UnhandledGatewayError extends Error {
    constructor(message: string);
}
declare class InsufficientFunds extends Error {
    constructor(amount: bigint);
}
interface ActorNotFoundResult {
    isActorNotFound: boolean;
    address: Address | null;
}
declare function isActorNotFoundError(error: Error): ActorNotFoundResult;
declare class ActorNotFound extends Error {
    constructor(address: Address);
}

export { ActorNotFound, type ActorNotFoundResult, AddObjectError, BucketNotFound, CreateBucketError, InsufficientFunds, InvalidValue, ObjectNotAvailable, ObjectNotFound, OutOfGasError, UnhandledBlobError, UnhandledBucketError, UnhandledCreditError, UnhandledGatewayError, isActorNotFoundError };
