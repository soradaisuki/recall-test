import { Chain, PublicClient, WalletClient, Address, GetContractReturnType, Client, ContractFunctionArgs, AbiStateMutability } from 'viem';
import { gatewayManagerFacetAbi } from '@recallnet/contracts';
import { Result } from './utils.js';

type SubnetIdStruct = {
    root: number;
    route: string[];
};
type AddressType = "evm" | "fvm";
declare class SubnetId {
    faux: string;
    real: SubnetIdStruct;
    evm: SubnetIdStruct;
    explicitChainId: number | undefined;
    constructor(root: number, route: string[], chainId: number | undefined, faux?: string);
    static fromString(subnetIdStr: string): SubnetId;
    static fromChain(chain: Chain): SubnetId;
    withChainId(chainId: number): SubnetId;
    setChainId(chainId: number): void;
    isRoot(): boolean;
    rootId(): number;
    toString(): string;
    chainId(): number;
    subnetActorAddress(type?: AddressType): string | undefined;
    parent(): SubnetId;
}

type FundWithTokenParams = ContractFunctionArgs<typeof gatewayManagerFacetAbi, AbiStateMutability, "fundWithToken">;
type SubnetIdTyped = FundWithTokenParams[0];
type FvmAddressTyped = FundWithTokenParams[1];
type ReleaseParams = ContractFunctionArgs<typeof gatewayManagerFacetAbi, AbiStateMutability, "release">;
declare class GatewayManager {
    getContract(publicClient: PublicClient, walletClient: WalletClient, contractAddress: Address): GetContractReturnType<typeof gatewayManagerFacetAbi, Client, Address>;
    fundWithToken(publicClient: PublicClient, walletClient: WalletClient, contractAddress: Address, forSubnet: SubnetId, amount: bigint, recipient?: Address): Promise<Result>;
    release(publicClient: PublicClient, walletClient: WalletClient, contractAddress: Address, amount: bigint, recipient?: Address): Promise<Result>;
}

export { type AddressType, type FundWithTokenParams, type FvmAddressTyped, GatewayManager, type ReleaseParams, SubnetId, type SubnetIdStruct, type SubnetIdTyped };
