import {
  AccountManager
} from "./chunk-AFVFH3BJ.js";
import {
  BlobManager
} from "./chunk-FRL2WKG3.js";
import {
  BucketManager
} from "./chunk-DWMDVAEV.js";
import {
  CreditManager
} from "./chunk-UQIDGJRJ.js";
import {
  SubnetId
} from "./chunk-MQVFN5CY.js";
import "./chunk-7QOERXGX.js";
import "./chunk-4AFX2PSM.js";
import "./chunk-DLYT7DCU.js";
import "./chunk-VDEK3UW2.js";

// src/client.ts
import {
  createPublicClient,
  createWalletClient,
  http,
  isHex
} from "viem";
import { privateKeyToAccount } from "viem/accounts";
import "viem/window";
import { getChain, testnet } from "@recallnet/chains";
var createPublicClientForChain = (chain = testnet) => createPublicClient({
  chain,
  transport: http()
});
var walletClientFromPrivateKey = (privateKey, chain = testnet) => {
  const hexPrivateKey = isHex(privateKey) ? privateKey : `0x${privateKey}`;
  return createWalletClient({
    account: privateKeyToAccount(hexPrivateKey),
    chain,
    transport: http()
  });
};
var RecallClient = class _RecallClient {
  publicClient;
  walletClient;
  contractOverrides;
  subnetId;
  // TODO: this logic probably needs to be refactored to properly handle conflicts
  constructor(config = {}) {
    if (config.walletClient) this.walletClient = config.walletClient;
    if (config.publicClient) {
      this.publicClient = config.publicClient;
    } else {
      this.publicClient = config.walletClient ? _RecallClient.fromChain(config.walletClient.chain).publicClient : _RecallClient.fromChain().publicClient;
    }
    const chain = this.publicClient.chain;
    if (!chain) throw new Error("missing chain in provided client");
    this.subnetId = SubnetId.fromChain(chain);
    this.contractOverrides = config.contractOverrides ?? {};
  }
  // Creates a RecallClient with read & write capabilities from a private key
  static fromPrivateKey(privateKey, chain = testnet, contractOverrides) {
    const walletClient = walletClientFromPrivateKey(privateKey, chain);
    const publicClient = createPublicClientForChain(chain);
    return new _RecallClient({
      publicClient,
      walletClient,
      contractOverrides
    });
  }
  // Creates a public RecallClient from a chain
  static fromChain(chain = testnet, contractOverrides) {
    return new _RecallClient({
      publicClient: createPublicClient({ chain, transport: http() }),
      contractOverrides
    });
  }
  // Creates a public RecallClient from a chain name
  static fromChainName(chainName = "testnet") {
    return new _RecallClient({
      publicClient: createPublicClient({
        chain: getChain(chainName),
        transport: http()
      })
    });
  }
  // Switches the chain for the client (e.g., from/to a parent and child subnet chain)
  async switchChain(chain) {
    this.publicClient = createPublicClientForChain(chain);
    if (!this.walletClient) return;
    const isBrowserWallet = this.walletClient.transport.type === "custom";
    if (isBrowserWallet) {
      await this.walletClient.switchChain({ id: chain.id });
    } else {
      this.walletClient = createWalletClient({
        chain,
        account: this.walletClient.account,
        transport: http()
      });
    }
  }
  // Returns the subnet ID for the client
  getSubnetId() {
    return this.subnetId;
  }
  // Creates an AccountManager for the client
  accountManager() {
    return new AccountManager(this);
  }
  // Creates a BlobManager for the client
  blobManager(contractAddress) {
    const override = contractAddress ?? this.contractOverrides.blobManager?.[this.publicClient.chain.id];
    return new BlobManager(this, override);
  }
  // Creates a BucketManager for the client
  bucketManager(contractAddress) {
    const override = contractAddress ?? this.contractOverrides.bucketManager?.[this.publicClient.chain.id];
    return new BucketManager(this, override);
  }
  // Creates a CreditManager for the client
  creditManager(contractAddress) {
    const override = contractAddress ?? this.contractOverrides.creditManager?.[this.publicClient.chain.id];
    return new CreditManager(this, override);
  }
};
export {
  RecallClient,
  createPublicClientForChain,
  walletClientFromPrivateKey
};
